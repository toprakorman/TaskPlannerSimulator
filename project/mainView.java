/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

import project.ObserverPattern.Observer;
import project.Task.Task;
import project.message.NotificationMessageDecorator;
import project.message.BirthdayMessageDecorator;
import project.message.Message;
import project.message.BasicMessage;
import java.time.LocalDate;
import java.time.Period;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import project.message.DateMessageDecorator;
import project.message.DayMessageDecorator;

/**
 *
 * @author pc
 */
public class mainView extends javax.swing.JFrame implements Observer {

    Message basicMessage = new BasicMessage();
    Message dayMessage = new DayMessageDecorator(basicMessage);
    Message dateMessage = new DateMessageDecorator(basicMessage);
    LocalDate today = LocalDate.now();

    /**
     * Creates new form NewJFrame
     */
    public mainView() {

        setVisible(true);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        Add = new javax.swing.JButton();
        Edit = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Desc = new javax.swing.JLabel("Closest Task: ");
        Day = new javax.swing.JLabel(dayMessage.getMessage(today));
        Date = new javax.swing.JLabel(dateMessage.getMessage(today));
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        textArea = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        Dot = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        Table.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        Add.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        Add.setText("Add");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        Edit.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        Edit.setText("Edit");

        Delete.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        Delete.setText("Delete");

        Desc.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        Desc.setText("Description");

        Day.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N

        Date.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        jLabel1.setText("Task Manager");

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        jLabel2.setText("Tasks");

        jLabel3.setText("---------------------------------");

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));

        textArea.setBackground(new java.awt.Color(153, 153, 255));
        textArea.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        textArea.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        textArea.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textArea, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textArea, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jLabel4.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        jLabel4.setText("New Task Distribution:");

        jLabel5.setText("----------------------------------");

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));

        Dot.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        Dot.setText("Dot");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Dot, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Dot, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(248, 248, 248)
                        .addComponent(Date))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Edit, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(418, 418, 418)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(26, 26, 26))))
                            .addComponent(Desc))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(248, 248, 248)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(Day))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(6, 6, 6)
                        .addComponent(Day)
                        .addGap(6, 6, 6)
                        .addComponent(Date)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addGap(6, 6, 6)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Desc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Edit)
                            .addComponent(Add)
                            .addComponent(Delete))
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainView().setVisible(true);
            }
        });
    }

    @Override
    public void update(String notification) {
        Desc.setText(notification);
    }

    public void updateClosestTask(List<Task> tasks, LocalDate today) {
        if (tasks.isEmpty()) {
            Desc.setText("No tasks available.");
            return;
        }

        Task closestTask = tasks.stream()
                .filter(task -> !task.getDeadline().isBefore(today))
                .min((task1, task2) -> task1.getDeadline().compareTo(task2.getDeadline()))
                .orElseThrow(() -> new IllegalArgumentException("No future tasks found"));

        Message message = new BasicMessage();

        if (closestTask.getCategoryName().equalsIgnoreCase("birthday")) {
            message = new BirthdayMessageDecorator(message, closestTask.getDeadline());
        } else {
            message = new NotificationMessageDecorator(message, closestTask);
        }

        LocalDate deadline = closestTask.getDeadline();
        Period period = Period.between(today, deadline);
        StringBuilder remainingTime = new StringBuilder();

        if (period.getYears() > 0) {
            remainingTime.append(period.getYears()).append(" year")
                    .append(period.getYears() > 1 ? "s" : "").append(", ");
        }
        if (period.getMonths() > 0) {
            remainingTime.append(period.getMonths()).append(" month")
                    .append(period.getMonths() > 1 ? "s" : "").append(", ");
        }
        if (period.getDays() > 0) {
            remainingTime.append(period.getDays()).append(" day")
                    .append(period.getDays() > 1 ? "s" : "");
        }

        Desc.setText("Time left until the " + closestTask.getName() + " task: " + remainingTime.toString());

        if ((period.getYears() == 0) && (period.getMonths() == 0) && (period.getDays() == 0)) {
            Desc.setText(closestTask.getName() + " Task Day!");
            if (closestTask.getCategoryName().equalsIgnoreCase("birthday")) {
                Desc.setText(closestTask.getName() + " Day! Happy Birthday!");
            }

        }

    }

    public JButton getAddButton() {
        return Add;
    }

    public JLabel getDateButton() {
        return Date;
    }

    public JLabel getDayButton() {
        return Day;
    }

    public JButton getDeleteButton() {
        return Delete;
    }

    public JLabel getDesc() {
        return Desc;
    }

    public JButton getEditButton() {
        return Edit;
    }

    public JTable getTable() {
        return Table;
    }

    public JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    /*
    public JScrollPane getjScrollPane2() {
        return jScrollPane2;
    }
     */
    public JLabel getTextArea() {
        return textArea;
    }

    public void updateTaskNotifications(List<Task> tasks, LocalDate today) {
        StringBuilder notificationText = new StringBuilder("<html>");
        for (Task task : tasks) {
            // LocalDate today = LocalDate.now();
            long daysLeft = today.until(task.getDeadline()).getDays();
            long monthLeft = today.until(task.getDeadline()).getMonths();
            long yearsLeft = today.until(task.getDeadline()).getYears();

            Period period = Period.between(today, task.getDeadline());

            String remainingTime;
            if (daysLeft <= 0 && monthLeft <= 0 && yearsLeft <= 0) {
                remainingTime = "Deadline passed";
            } else {
                StringBuilder timeLeft = new StringBuilder();
                if (period.getYears() > 0) {
                    timeLeft.append(period.getYears()).append(" year").append(period.getYears() > 1 ? "s" : "").append(", ");
                }
                if (period.getMonths() > 0) {
                    timeLeft.append(period.getMonths()).append(" month").append(period.getMonths() > 1 ? "s" : "").append(", ");
                }
                if (period.getDays() > 0) {
                    timeLeft.append(period.getDays()).append(" day").append(period.getDays() > 1 ? "s" : "");
                }

                if (timeLeft.length() == 0) {
                    remainingTime = "Due today";
                } else {
                    remainingTime = timeLeft.toString().trim();
                }
            }

            String color = (daysLeft == 1 && monthLeft == 0 && yearsLeft == 0) ? "red" : "black";
            notificationText.append("<span style='color:").append(color).append(";'>")
                    .append(task.getName())
                    .append(" - ")
                    .append(remainingTime)
                    .append("</span><br>");
        }
        notificationText.append("</html>");
        textArea.setText(notificationText.toString());
    }

    public void setDate(String date) {
        Date.setText(date);
    }

    public void setDay(String day) {
        Day.setText(day);
    }

    public JLabel getDot() {
        return Dot;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JLabel Date;
    private javax.swing.JLabel Day;
    private javax.swing.JButton Delete;
    private javax.swing.JLabel Desc;
    private javax.swing.JLabel Dot;
    private javax.swing.JButton Edit;
    private javax.swing.JTable Table;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel textArea;
    // End of variables declaration//GEN-END:variables
}
